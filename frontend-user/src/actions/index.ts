"use server";
import OpenAI from "openai";
import {
  fetchBooksAndCategories,
  fetchBorrowCardsByUserId,
  fetchFAQS,
} from "./mongodb-actions";
import axios from "axios";

const openAI = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function chatCompletion(chatMessages, userId) {
  try {
    const latestMessage = chatMessages.at(-1)?.content.toLowerCase() || "";

    // 1. FAQs
    const document = await fetchFAQS();
    const faqsAnswer = document?.faqs.find((faq) =>
      latestMessage.includes(faq.question.toLowerCase())
    );
    if (faqsAnswer) return { role: "assistant", content: faqsAnswer.answer };

    // 2. G·ª£i √Ω s√°ch
    const data = await fetchBooksAndCategories();
    if (
      latestMessage.includes("g·ª£i √Ω s√°ch") ||
      latestMessage.includes("c√≥ g√¨")
    ) {
      const suggestions = data.books
        .slice(0, 5)
        .map((b) => {
          const img =
            Array.isArray(b.hinhAnh) && b.hinhAnh.length > 0
              ? `\n![·∫¢nh b√¨a](${b.hinhAnh[0]})`
              : "";
          // return `‚Ä¢ **${b.tenSach}** - _${b.tenTacGia}_${img}`;
          return `‚Ä¢ **${b.tenSach}** - _${b.tenTacGia}_\n\n![·∫¢nh b√¨a](${b.hinhAnh[0]})`;
        })
        .join("\n");

      return {
        role: "assistant",
        content: `D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë s√°ch b·∫°n c√≥ th·ªÉ th√≠ch:\n${suggestions}`,
      };
    }

    // 3. G·ª£i √Ω theo th·ªÉ lo·∫°i
    if (
      latestMessage.includes("c√≥ th·ªÉ lo·∫°i g√¨") ||
      latestMessage.includes("c√≥ c√°c lo·∫°i s√°ch n√†o")
    ) {
      const uniqueGenres = Array.from(
        new Set(data.books.map((b) => b.tenTheLoai))
      );
      return {
        role: "assistant",
        content:
          "D∆∞·ªõi ƒë√¢y l√† c√°c th·ªÉ lo·∫°i b·∫°n c√≥ th·ªÉ quan t√¢m:\n" +
          uniqueGenres.map((g) => `‚Ä¢ ${g}`).join("\n"),
      };
    }

    // 3.1 G·ª£i √Ω theo t√™n th·ªÉ lo·∫°i c·ª• th·ªÉ (so kh·ªõp chu·ªói)
    const lowerMsg = latestMessage.toLowerCase();
    const matchedGenre = data.books.find((b) =>
      lowerMsg.includes(b.tenTheLoai.toLowerCase())
    )?.tenTheLoai;

    if (matchedGenre) {
      const matchingBooks = data.books.filter(
        (b) => b.tenTheLoai === matchedGenre
      );

      const suggestions = matchingBooks
        .slice(0, 5)
        .map((b) => {
          const img =
            Array.isArray(b.hinhAnh) && b.hinhAnh.length > 0
          //     ? `\n![·∫¢nh b√¨a](${b.hinhAnh[0]})`
          //     : "";
          // return `‚Ä¢ **${b.tenSach}** - _${b.tenTacGia}_${img}`;
           ? `\n![·∫¢nh b√¨a](${b.hinhAnh[0]})`
              : "";
          // return `‚Ä¢ **${b.tenSach}** - _${b.tenTacGia}_${img}`;
          return `‚Ä¢ **${b.tenSach}** - _${b.tenTacGia}_\n\n![·∫¢nh b√¨a](${b.hinhAnh[0]})`;
        })
        .join("\n");

      return {
        role: "assistant",
        content: `M·ªôt s·ªë s√°ch thu·ªôc th·ªÉ lo·∫°i **"${matchedGenre}"**:\n${suggestions}`,
      };
    }
    // 4. Phi·∫øu m∆∞·ª£n
    if (
      latestMessage.includes("phi·∫øu m∆∞·ª£n c·ªßa t√¥i") ||
      latestMessage.includes("c√≥ m∆∞·ª£n s√°ch g√¨ kh√¥ng") ||
      latestMessage.includes("ƒëang m∆∞·ª£n s√°ch g√¨")
    ) {
      const borrowCards = await fetchBorrowCardsByUserId(userId);
      if (!borrowCards.length) {
        return {
          role: "assistant",
          content: "B·∫°n ch∆∞a c√≥ phi·∫øu m∆∞·ª£n n√†o.",
        };
      }

      // G·ªôp th√¥ng tin s√°ch v√†o phi·∫øu m∆∞·ª£n
      const bookMap = new Map(data.books.map((b) => [b._id.toString(), b]));
      const enriched = borrowCards.map((card) => {
        const borrowedBooks = card.bookIds
          .map((id) => {
            const book = bookMap.get(id);
            if (!book) return null;
            return `- ${book.tenSach} - ${book.tenTacGia}`;
          })
          .filter(Boolean)
          .join("\n");

        return `**Phi·∫øu m∆∞·ª£n ID:** \`${card._id}\`\n\n**S√°ch ƒë√£ m∆∞·ª£n:**\n\n${borrowedBooks}\n\n**‚Üí Tr·∫°ng th√°i:** ${card.status}`;
      });

      return {
        role: "assistant",
        content: `ƒê√¢y l√† danh s√°ch s√°ch b·∫°n ƒë√£ m∆∞·ª£n:\n\n${enriched.join(
          "\n\n---\n\n"
        )}`,
      };
    }

    // Ph√°t hi·ªán ng∆∞·ªùi d√πng mu·ªën hu·ª∑ phi·∫øu m∆∞·ª£n
// if (latestMessage.includes("h·ªßy phi·∫øu m∆∞·ª£n") || latestMessage.includes("x√≥a phi·∫øu m∆∞·ª£n")) {
//   const borrowCards = await fetchBorrowCardsByUserId(userId);
//   const requestCards = borrowCards.filter(c => c.status === "ƒêang y√™u c·∫ßu");

//   if (requestCards.length === 0) {
//     return {
//       role: "assistant",
//       content: "B·∫°n kh√¥ng c√≥ phi·∫øu m∆∞·ª£n n√†o ƒëang ·ªü tr·∫°ng th√°i 'ƒêang y√™u c·∫ßu' ƒë·ªÉ h·ªßy.",
//     };
//   }

//   const list = requestCards
//     .map((card) => `‚Ä¢ ID: \`${card._id}\` - g·ªìm ${card.bookIds.length} s√°ch`)
//     .join("\n");

//   return {
//     role: "assistant",
//     content:
//       "ƒê√¢y l√† c√°c phi·∫øu m∆∞·ª£n b·∫°n c√≥ th·ªÉ h·ªßy. Vui l√≤ng g·ª≠i l·∫°i ID phi·∫øu m∆∞·ª£n b·∫°n mu·ªën h·ªßy:\n\n" + list,
//   };
// }
if (latestMessage.includes("h·ªßy phi·∫øu m∆∞·ª£n") || latestMessage.includes("x√≥a phi·∫øu m∆∞·ª£n")) {
  const borrowCards = await fetchBorrowCardsByUserId(userId);
  const data = await fetchBooksAndCategories();
  const bookMap = new Map(data.books.map((b) => [b._id.toString(), b]));

  const requestCards = borrowCards.filter(c => c.status === "ƒêang y√™u c·∫ßu");

  if (requestCards.length === 0) {
    return {
      role: "assistant",
      content: "‚úÖ Hi·ªán t·∫°i b·∫°n kh√¥ng c√≥ phi·∫øu m∆∞·ª£n n√†o ƒëang ·ªü tr·∫°ng th√°i 'ƒêang y√™u c·∫ßu' ƒë·ªÉ c√≥ th·ªÉ h·ªßy.",
    };
  }

  const list = requestCards
    .map((card) => {
      const bookList = card.bookIds
        .map(id => {
          const book = bookMap.get(id);
          return book ? `- ${book.tenSach} (${book.tenTacGia})` : null;
        })
        .filter(Boolean)
        .join("\n");

      return `üìÑ **Phi·∫øu m∆∞·ª£n ID:** \`${card._id}\`\nBao g·ªìm s√°ch:\n${bookList}`;
    })
    .join("\n\n---\n\n");

  return {
    role: "assistant",
    content:
      `üóëÔ∏è ƒê√¢y l√† c√°c phi·∫øu m∆∞·ª£n b·∫°n c√≥ th·ªÉ h·ªßy (tr·∫°ng th√°i: "ƒêang y√™u c·∫ßu"):\n\n${list}\n\n**Vui l√≤ng g·ª≠i l·∫°i ID phi·∫øu m∆∞·ª£n b·∫°n mu·ªën h·ªßy.**`,
  };
}

// N·∫øu tin nh·∫Øn l√† m·ªôt ID phi·∫øu m∆∞·ª£n
if (/^[a-f\d]{24}$/.test(latestMessage.trim())) {
  const borrowCards = await fetchBorrowCardsByUserId(userId);
  const cardToDelete = borrowCards.find(
    (c) =>
      c._id?.toString?.() === latestMessage.trim() &&
      c.status === "ƒêang y√™u c·∫ßu"
  );

  if (cardToDelete) {
    try {
      await axios.delete(`https://library-backend-ydnf.onrender.com/borrow-card/${cardToDelete._id}`);
      return {
        role: "assistant",
        content: `‚úÖ ƒê√£ h·ªßy th√†nh c√¥ng phi·∫øu m∆∞·ª£n c√≥ ID: \`${cardToDelete._id}\`.`,
      };
    } catch (error) {
      return {
        role: "assistant",
        content: `‚ùå Kh√¥ng th·ªÉ h·ªßy phi·∫øu m∆∞·ª£n. L·ªói: ${error?.response?.data || "Kh√¥ng r√µ"}`,
      };
    }
  }
}


// 4.1 N·∫øu ng∆∞·ªùi d√πng mu·ªën m∆∞·ª£n s√°ch
if (
  latestMessage.includes("ƒëƒÉng k√Ω m∆∞·ª£n") ||
  latestMessage.includes("mu·ªën m∆∞·ª£n") || 
  latestMessage.includes("t√¥i mu·ªën m∆∞·ª£n s√°ch") ||
  latestMessage.includes("t·∫°o phi·∫øu m∆∞·ª£n")
) {
  const matchedBooks = data.books.filter((book) =>
    latestMessage.includes(book.tenSach.toLowerCase())
  );

  if (matchedBooks.length === 0) {
    return {
      role: "assistant",
      content: "‚ùå M√¨nh kh√¥ng t√¨m th·∫•y t√™n s√°ch n√†o kh·ªõp trong y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng vi·∫øt r√µ t√™n s√°ch b·∫°n mu·ªën m∆∞·ª£n nh√©!",
    };
  }

  const bookIds = matchedBooks.map((b) => b._id);
  try {
    const response = await axios.post("https://library-backend-ydnf.onrender.com/borrow-card/create", {
      userId,
      bookIds,
    });

    return {
      role: "assistant",
      content: `‚úÖ ƒê√£ t·∫°o phi·∫øu m∆∞·ª£n th√†nh c√¥ng cho c√°c s√°ch:\n${matchedBooks
        .map((b) => `‚Ä¢ ${b.tenSach} (${b.tenTacGia})`)
        .join("\n")}\n\n B·∫°n vui l√≤ng ƒë·∫øn th∆∞ vi·ªán nh·∫≠n s√°ch s·ªõm nh·∫•t nh√©!`,
    };
  } catch (error) {
    return {
      role: "assistant",
      content: `‚ùå Kh√¥ng th·ªÉ t·∫°o phi·∫øu m∆∞·ª£n. L·ªói: ${error?.response?.data || "Kh√¥ng r√µ nguy√™n nh√¢n"}`,
    };
  }
}

    // 5. Fallback g·ª≠i l√™n OpenAI n·∫øu kh√¥ng kh·ªõp
    const borrowCards = await fetchBorrowCardsByUserId(userId);
    const bookMap = new Map(data.books.map((b) => [b._id.toString(), b]));

    const chat = [
      {
        role: "system",
        content: `B·∫°n l√† tr·ª£ l√Ω th√¥ng minh c·ªßa ReadHub. D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu hi·ªán c√≥ ƒë·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi:
- M·ªôt s·ªë c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ)
- Danh s√°ch s√°ch & th·ªÉ lo·∫°i
- Danh s√°ch phi·∫øu m∆∞·ª£n c·ªßa ng∆∞·ªùi d√πng (n·∫øu c√≥)

H√£y d·ª±a tr√™n nh·ªØng d·ªØ li·ªáu sau ƒë·ªÉ tr·∫£ l·ªùi t·ª± nhi√™n v√† ch√≠nh x√°c.`,
      },
      ...(document?.faqs.map((faq) => ({
        role: "system",
        content: `FAQ - Q: ${faq.question} | A: ${faq.answer}`,
      })) || []),
      ...(data?.books.map((book) => {
        const img =
          Array.isArray(book.hinhAnh) && book.hinhAnh.length > 0
            ? `\n·∫¢nh b√¨a: ![·∫¢nh b√¨a](${book.hinhAnh[0]})`
            : "";

        return {
          role: "system",
          content: `S√°ch: ${book.tenSach}, Th·ªÉ lo·∫°i: ${book.tenTheLoai}, T√°c gi·∫£: ${book.tenTacGia}, M√¥ t·∫£: ${book.moTa}${img}`,
        };
      }) || []),
      ...(borrowCards
        .flatMap((card) =>
          card.bookIds.map((id) => {
            const book = bookMap.get(id);
            if (!book) return null;
            return {
              role: "system",
              content: `Phi·∫øu m∆∞·ª£n: S√°ch "${book.tenSach}", T√°c gi·∫£: ${book.tenTacGia}, Tr·∫°ng th√°i: ${card.status}`,
            };
          })
        )
        .filter(Boolean) || []),
      ...chatMessages,
    ];

    const completion = await openAI.chat.completions.create({
      messages: chat,
      model: "gpt-4o-mini",

    });

    const assistantMessage = completion.choices[0].message?.content;
    return {
      role: "assistant",
      content: assistantMessage || "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi.",
    };
  } catch (error) {
    console.error(error);
    return {
      role: "assistant",
      content: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
    };
  }
}
